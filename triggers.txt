***insertar***
create or replace function insertar_trigger_personas() returns trigger as $insertar$
declare begin

INSERT INTO auditoria(
            entidad, sentencia, usuario, fecha)
	    VALUES ('Personas','Insert',session_user,now());
return null;
end;
$insertar$ language plpgsql;

create trigger insertar_trigger_personas after insert
on personas for each row
execute procedure insertar_trigger_personas();

****************************************************
****actualizar*****
create or replace function actualizar_trigger_personas() returns trigger as $actualizar$
declare begin

INSERT INTO auditoria(
            entidad, sentencia, usuario, fecha)
	    VALUES ('personas','Actualizar',session_user,now());
return null;
end;
$actualizar$ language plpgsql;


create trigger actualizar_trigger_personas after update
on personas for each row
execute procedure actualizar_trigger_personas();

****************************************************
*****eliminar**********
create or replace function eliminar_trigger_personas() returns trigger as $eliminar$
declare begin

INSERT INTO auditoria(
            entidad, sentencia, usuario, fecha)
	    VALUES ('Personas','Eliminar',session_user,now());
return null;
end;
$eliminar$ language plpgsql;

create trigger eliminar_trigger_personas after delete
on personas for each row
execute procedure eliminar_trigger_personas();


****************************trigger para personas con fos user*********
***********************************************************************

create or replace function insertar_trigger_persona() returns trigger as $insertar$
declare begin

UPDATE public.fos_user SET roles = 'a:1:{i:0;s:13:"ROLE_AFILIADO";}';

return null;
end;
$insertar$ language plpgsql;

create trigger insertar_trigger_persona after insert
on persona for each row
execute procedure insertar_trigger_persona();





create or replace function insertar_trigger_persona_user() returns trigger as $insertar$
DECLARE
	U_id integer;
   M_rol text;
BEGIN
		-- selecciona el ultimo insertado persona_user y busca su rol

	    U_id=(SELECT idusuario FROM persona_user ORDER BY id DESC LIMIT 1);

	    M_rol=(SELECT roles FROM fos_user WHERE id = U_id);

    IF (M_rol = 'a:1:{i:0;s:13:"ROLE_TEMPORAL";}') 
    THEN
      UPDATE public.fos_user SET roles = 'a:1:{i:0;s:13:"ROLE_AFILIADO";}';
	  RETURN null;
    ELSE 
      RETURN null;
    END IF;
 end;
$insertar$ language plpgsql;


CREATE TRIGGER insertar_trigger_persona_user
  AFTER INSERT
  ON public.persona_user
  FOR EACH ROW
  EXECUTE PROCEDURE public.insertar_trigger_persona_user();



php app/console doctrine:schema:update --dump-sql

*************git***************

Si quieres mantener los cambios:

git reset [--mixed] HEAD~1

Si además no quieres cargarte el commit (sólo mover el head al anterior):

git reset --soft HEAD~1

Y si no quieres mantenerlos (y volver al estado del commit anterior, en la práctica, destruir el último commit completamente como si nunca hubiera existido):

git reset --hard HEAD~1


***********************postgres******************

POSTGRESQL 9.1.12

DUMP:

pg_dump -U user bd_name > archive_name.sql

put the user password and press enter.

RESTORE:

psql -U user db_name < /directory/archive.sql

put the user password and press enter.


**************insert con valor sequencial************
INSERT INTO public.titular VALUES (nextval('titular_id_seq'), 10);


